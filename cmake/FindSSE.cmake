
# Check if SSE/AVX instructions are available on the machine where
# the project is compiled.

unset(INTRIN_CXX_FLAGS CACHE)
unset(INTRIN_DEFINITIONS CACHE)
unset(INTRIN_TYPES CACHE)

IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
    EXEC_PROGRAM(cat ARGS "/proc/cpuinfo" OUTPUT_VARIABLE CPUINFO)

    MACRO(FIND_INTRIN_TYPE SEARCH_STR SEARCH_VAR COMMENT_STR)
        STRING(REGEX REPLACE "^.*(${SEARCH_STR}).*$" "\\1" SSE_THERE ${CPUINFO})
        STRING(COMPARE EQUAL "${SEARCH_STR}" "${SSE_THERE}" ${SEARCH_VAR}_TRUE)
        IF (${SEARCH_VAR}_TRUE)
            set(${SEARCH_VAR}_FOUND ON CACHE BOOL "${COMMENT_STR} available on host")
        ELSE (${SEARCH_VAR}_TRUE)
            set(${SEARCH_VAR}_FOUND OFF CACHE BOOL "${COMMENT_STR} available on host")
        ENDIF (${SEARCH_VAR}_TRUE)
    ENDMACRO(FIND_INTRIN_TYPE)

    FIND_INTRIN_TYPE(sse2 SSE2 SSE2)

    # /proc/cpuinfo apparently omits sse3 :(
    STRING(REGEX REPLACE "^.*[^s](sse3).*$" "\\1" SSE_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "sse3" "${SSE_THERE}" SSE3_TRUE)
    IF (NOT SSE3_TRUE)
        STRING(REGEX REPLACE "^.*(T2300).*$" "\\1" SSE_THERE ${CPUINFO})
        STRING(COMPARE EQUAL "T2300" "${SSE_THERE}" SSE3_TRUE)
    ENDIF (NOT SSE3_TRUE)

    STRING(REGEX REPLACE "^.*(ssse3).*$" "\\1" SSE_THERE ${CPUINFO})
    STRING(COMPARE EQUAL "ssse3" "${SSE_THERE}" SSSE3_TRUE)
    IF (SSE3_TRUE OR SSSE3_TRUE)
        set(SSE3_FOUND ON CACHE BOOL "SSE3 available on host")
    ELSE (SSE3_TRUE OR SSSE3_TRUE)
        set(SSE3_FOUND OFF CACHE BOOL "SSE3 available on host")
    ENDIF (SSE3_TRUE OR SSSE3_TRUE)
    IF (SSSE3_TRUE)
        set(SSSE3_FOUND ON CACHE BOOL "SSSE3 available on host")
    ELSE (SSSE3_TRUE)
        set(SSSE3_FOUND OFF CACHE BOOL "SSSE3 available on host")
    ENDIF (SSSE3_TRUE)

    FIND_INTRIN_TYPE(sse4_1 SSE4_1 SSE4.1)
    FIND_INTRIN_TYPE(sse4_2 SSE4_2 SSE4.2)

    FIND_INTRIN_TYPE(avx AVX AVX)
    FIND_INTRIN_TYPE(avx2 AVX2 AVX2)
    FIND_INTRIN_TYPE(fma FMA FMA)

    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        string(TOLOWER "${ext}" lext)
        FIND_INTRIN_TYPE(avx512${lext} AVX_512${ext} AVX-512${ext})
    endforeach()

    set(INTRIN_TYPES SSE2 SSE3 SSSE3 SSE4_1 SSE4_2 AVX AVX2 FMA)
    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        list(APPEND INTRIN_TYPES AVX512${ext})
    endforeach()

ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Darwin")
    EXEC_PROGRAM("/usr/sbin/sysctl -n machdep.cpu.features" OUTPUT_VARIABLE
        CPUINFO)

    MACRO(FIND_INTRIN_TYPE SEARCH_STR SEARCH_VAR COMMENT_STR)
        STRING(REGEX REPLACE "^.*${SEARCH_STR}.*$" "\\1" SSE_THERE ${CPUINFO})
        STRING(COMPARE EQUAL "${SEARCH_STR}" "${SSE_THERE}" ${SEARCH_VAR}_TRUE)
        IF (${SEARCH_VAR}_TRUE)
            set(${SEARCH_VAR}_FOUND ON CACHE BOOL "${COMMENT_STR} available on host")
        ELSE (${SEARCH_VAR}_TRUE)
            set(${SEARCH_VAR}_FOUND OFF CACHE BOOL "${COMMENT_STR} available on host")
        ENDIF (${SEARCH_VAR}_TRUE)
    ENDMACRO(FIND_INTRIN_TYPE)

    FIND_INTRIN_TYPE("[^S](SSE2)" SSE2   SSE2)
    FIND_INTRIN_TYPE("[^S](SSE3)" SSE3   SSE3)
    FIND_INTRIN_TYPE("(SSSE3)"    SSSE3  SSSE3)
    FIND_INTRIN_TYPE("(SSE4.1)"   SSE4_1 SSE4.1)
    FIND_INTRIN_TYPE("(SSE4.2)"   SSE4_2 SSE4.2)

    FIND_INTRIN_TYPE("(AVX)"  AVX  AVX)
    FIND_INTRIN_TYPE("(AVX2)" AVX2 AVX2)
    FIND_INTRIN_TYPE("(FMA)"  FMA  FMA)

    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        FIND_INTRIN_TYPE("(AVX512${ext})" AVX_512${ext} AVX-512${ext})
    endforeach()

    set(INTRIN_TYPES SSE2 SSE3 SSSE3 SSE4_1 SSE4_2 AVX AVX2 FMA)
    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        list(APPEND INTRIN_TYPES AVX512${ext})
    endforeach()

ELSEIF(CMAKE_SYSTEM_NAME MATCHES "Windows")
    # TODO
    set(SSE2_FOUND   ON  CACHE BOOL "SSE2 available on host")
    set(SSE3_FOUND   OFF CACHE BOOL "SSE3 available on host")
    set(SSSE3_FOUND  OFF CACHE BOOL "SSSE3 available on host")
    set(SSE4_1_FOUND OFF CACHE BOOL "SSE4.1 available on host")
    set(SSE4_2_FOUND OFF CACHE BOOL "SSE4.2 available on host")
    set(AVX_FOUND 	OFF CACHE BOOL "AVX available on host")
    set(AVX2_FOUND 	OFF CACHE BOOL "AVX2 available on host")
    set(FMA_FOUND    OFF CACHE BOOL "FMA available on host")
    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        set(AVX_512${ext}_FOUND OFF CACHE BOOL "AVX-512${ext} available on host")
    endforeach()
    set(INTRIN_TYPES SSE2 SSE3 SSSE3 SSE4_1 SSE4_2 AVX AVX2 FMA)
    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        list(APPEND INTRIN_TYPES AVX512${ext})
    endforeach()
ELSE(CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(SSE2_FOUND   ON  CACHE BOOL "SSE2 available on host")
    set(SSE3_FOUND   OFF CACHE BOOL "SSE3 available on host")
    set(SSSE3_FOUND  OFF CACHE BOOL "SSSE3 available on host")
    set(SSE4_1_FOUND OFF CACHE BOOL "SSE4.1 available on host")
    set(SSE4_2_FOUND OFF CACHE BOOL "SSE4.2 available on host")
    set(AVX_FOUND 	OFF CACHE BOOL "AVX available on host")
    set(AVX2_FOUND 	OFF CACHE BOOL "AVX2 available on host")
    set(FMA_FOUND    OFF CACHE BOOL "FMA available on host")
    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        set(AVX_512${ext}_FOUND OFF CACHE BOOL "AVX-512${ext} available on host")
    endforeach()
    set(INTRIN_TYPES SSE2 SSE3 SSSE3 SSE4_1 SSE4_2 AVX AVX2 FMA)
    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        list(APPEND INTRIN_TYPES AVX512${ext})
    endforeach()
ENDIF(CMAKE_SYSTEM_NAME MATCHES "Linux")

foreach(type ${INTRIN_TYPES})
    mark_as_advanced(${type}_FOUND)
endforeach()

set(_INTRIN_CXX_FLAGS )
set(_INTRIN_DEFINITIONS )

if(CMAKE_CXX_COMPILER MATCHES "icc.*")
    set(CMAKE_COMPILER_IS_INTEL_ICC ON)
endif()
if(CMAKE_CXX_COMPILER MATCHES "icpc.*")
    set(CMAKE_COMPILER_IS_INTEL_ICPC ON)
endif()

if(CMAKE_COMPILER_IS_INTEL_ICC OR CMAKE_COMPILER_IS_INTEL_ICPC)
    set(_FLAGS )
    foreach(type SSE2 SSE3 SSSE3 SSE4_1 AVX)
        string(TOLOWER "${type}" _flag)
        string(REPLACE "_" "." _flag "${_flag}")
        set(${type}_FLAGS "-m${_flag}")
        if(${type}_FOUND)
            set(_FLAGS "${${type}_FLAGS}")
            list(APPEND _INTRIN_DEFINITIONS HAS_${type})
        endif()
    endforeach()

    if(AVX2_FOUND)
        set(_FLAGS "-march=core-avx2")
        list(APPEND _INTRIN_DEFINITIONS HAS_AVX2)
    endif()
    set(INTRIN_CXX_FLAGS "${_FLAGS}")

elseif(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)

    foreach(ext F BW CD DQ ER IFMA52 PF VBMI VL)
        list(APPEND AVX512_TYPES AVX_512${ext})
    endforeach()
    foreach(type SSE2 SSE3 SSSE3 SSE4_1 AVX AVX2 ${AVX512_TYPES})
        string(TOLOWER "${type}" _flag)
        string(REPLACE "_" "." _flag "${_flag}")
        set(${type}_FLAGS "-m${_flag}")
        if(${type}_FOUND)
            set(_FLAGS "${_FLAGS} ${${type}_FLAGS}")
            list(APPEND _INTRIN_DEFINITIONS HAS_${type})
        endif()
    endforeach()

    set(_INTRIN_CXX_FLAGS "${_FLAGS}")
endif()

set(INTRIN_CXX_FLAGS "${_INTRIN_CXX_FLAGS}" CACHE STRING "Intrinsic CXX flags")
set(INTRIN_DEFINITIONS "${_INTRIN_DEFINITIONS}" CACHE STRING "Intrinsic definitions")
set(INTRIN_TYPES "${INTRIN_TYPES}" CACHE STRING "Intrinsic types")

mark_as_advanced(INTRIN_CXX_FLAGS INTRIN_DEFINITIONS INTRIN_TYPES)

unset(_INTRIN_CXX_FLAGS)
unset(_INTRIN_DEFINITIONS)
